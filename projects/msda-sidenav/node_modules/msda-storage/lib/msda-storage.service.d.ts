import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class MsdaStorage {
    private _httpClient;
    applicationAbbrs: string[];
    private _clientId?;
    private _token?;
    private _apiPrefix;
    constructor(_httpClient: HttpClient);
    /**
     * Load Translations with App abbreviations
     * @param {String} appKeywords[]
     * @param {String} prefix optional parameter
     */
    loadTranslations(appKeywords: string[]): Promise<void>;
    /**
     * set clientId to storage
     * @param {number} clientId
     */
    setClientId(clientId: number | null, setInSession?: boolean): Promise<{
        success: boolean;
        error?: undefined;
    } | {
        success: boolean;
        error: any;
    }>;
    get clientId(): number | null;
    /**
     * remove clientId
     * @param {number} clientId
     */
    removeClientId(): void;
    private _setClientId;
    private _getClientId;
    /**
     * set lang to storage
     * @param {string} lang
     */
    setLang(lang: string): void;
    /**
     *  get lang
     */
    static get lang(): string | null;
    private _setLang;
    private _getLang;
    /**
     * common set item
     * @param {string} key
     * @param {string} value
     */
    setItem(key: string, value: string): void;
    /**
     * common get item
     * @param {string} key
     */
    getItem(key: string): string | null;
    /**
     * common remove item
     * @param {string} key
     */
    removeItem(key: string): void;
    /**
     * set session-token
     * @param {string} value
     */
    setToken(value: string): void;
    /**
     *  get token
     * @param {string} key
     */
    static get token(): string | null;
    /**
     *  remove token
     * @param {string} key
     */
    removeToken(): void;
    /**
     *  set appVersion
     * @param {MsdaAppVersions} versions
     */
    setAppVersion(versions: MsdaAppVersions): any;
    /**
     *  get appVersions
     */
    get appVersions(): any;
    _setSessionClient(clientId: number | null): import("rxjs").Observable<MsdaResponse<any>>;
    private _checkTranslationVersions;
    private _getRemoteTranslationVersions;
    private _getLocalTranslationVersions;
    private _getOutDatedAppKeywords;
    private _getTranslations;
    private _transformTranslations;
    private _updateInStorage;
    get translations(): any;
    get versions(): any;
    /**
     * set config
     * @param {Config} config  set apiConfig
     */
    setConfig(config: Config): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MsdaStorage, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MsdaStorage>;
}
export interface Config {
    apiPrefix: string;
}
export interface MsdaAppVersions {
    [x: string]: MsdaAppVersionItem;
}
export interface MsdaAppVersionItem {
    build: number;
    version: string;
}
export interface MsdaResponse<T> {
    result: {
        data: T;
    };
}
export interface AppTranlationVersion {
    [x: string]: number;
}
export interface Translations {
    [x: string]: {
        ge: string;
        en: string;
    };
}
export interface MsdaI18n {
    [x: string]: {
        version: number;
        keywords: Translations;
    };
}
export interface OriginalTranslation {
    keyword: string;
    translations: {
        ge: string;
        en: string;
    };
}
