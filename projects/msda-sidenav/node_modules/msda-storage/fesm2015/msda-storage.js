import { __awaiter } from 'tslib';
import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

const KEYS = {
    i18n: 'i18n',
    token: 'session-token',
    lang: 'lang',
    clientId: 'clientId',
    appVersions: 'appVersions'
};
class MsdaStorage {
    constructor(_httpClient) {
        this._httpClient = _httpClient;
        this.applicationAbbrs = [];
        this._token = '';
        this._apiPrefix = '/api';
    }
    /**
     * Load Translations with App abbreviations
     * @param {String} appKeywords[]
     * @param {String} prefix optional parameter
     */
    loadTranslations(appKeywords) {
        return __awaiter(this, void 0, void 0, function* () {
            if (appKeywords && appKeywords.length) {
                this.applicationAbbrs = appKeywords;
                this._checkTranslationVersions();
            }
        });
    }
    /**
     * set clientId to storage
     * @param {number} clientId
     */
    setClientId(clientId, setInSession) {
        return __awaiter(this, void 0, void 0, function* () {
            if (setInSession) {
                try {
                    yield this._setSessionClient(clientId).toPromise();
                    return { success: this._setClientId(clientId) };
                }
                catch (error) {
                    return { success: false, error };
                }
            }
            return { success: this._setClientId(clientId) };
        });
    }
    get clientId() {
        return this._getClientId();
    }
    /**
     * remove clientId
     * @param {number} clientId
     */
    removeClientId() {
        this.setClientId(null);
    }
    _setClientId(clientId) {
        this._clientId = clientId;
        if (clientId)
            localStorage.setItem(KEYS.clientId, clientId.toString());
        else
            localStorage.removeItem(KEYS.clientId);
        return true;
    }
    _getClientId() {
        try {
            this._clientId = Number(localStorage.getItem(KEYS.clientId));
            return this._clientId;
        }
        catch (error) {
            console.error(error);
            return null;
        }
    }
    /**
     * set lang to storage
     * @param {string} lang
     */
    setLang(lang) {
        this._setLang(lang);
    }
    /**
     *  get lang
     */
    static get lang() {
        return localStorage.getItem(KEYS.lang);
    }
    _setLang(lang) {
        if (lang)
            localStorage.setItem(KEYS.lang, lang);
        else
            localStorage.removeItem(KEYS.lang);
    }
    _getLang() {
        return localStorage.getItem(KEYS.lang);
    }
    /**
     * common set item
     * @param {string} key
     * @param {string} value
     */
    setItem(key, value) {
        localStorage.setItem(key, value);
    }
    /**
     * common get item
     * @param {string} key
     */
    getItem(key) {
        return localStorage.getItem(key);
    }
    /**
     * common remove item
     * @param {string} key
     */
    removeItem(key) {
        localStorage.removeItem(key);
    }
    /**
     * set session-token
     * @param {string} value
     */
    setToken(value) {
        this._token = value;
        localStorage.setItem(KEYS.token, value);
    }
    /**
     *  get token
     * @param {string} key
     */
    static get token() {
        return localStorage.getItem(KEYS.token);
    }
    /**
     *  remove token
     * @param {string} key
     */
    removeToken() {
        localStorage.removeItem(KEYS.token);
        this._token = null;
    }
    /**
     *  set appVersion
     * @param {MsdaAppVersions} versions
     */
    setAppVersion(versions) {
        const current = Object.assign(Object.assign({}, this.versions), versions);
        localStorage.setItem(KEYS.appVersions, JSON.stringify(current));
        return this.versions;
    }
    /**
     *  get appVersions
     */
    get appVersions() {
        return this.versions;
    }
    _setSessionClient(clientId) {
        return this._httpClient.post(`${this._apiPrefix}/um/v3/user/session/client`, { data: { clientId } });
    }
    //translations
    _checkTranslationVersions() {
        return __awaiter(this, void 0, void 0, function* () {
            const versions = yield this._getRemoteTranslationVersions();
            if (versions) {
                const i18n = this._getLocalTranslationVersions();
                const appsTranslationsToUpdate = this._getOutDatedAppKeywords(versions, i18n);
                const updatedAppTranslations = yield this._getTranslations(appsTranslationsToUpdate);
                this._updateInStorage(updatedAppTranslations);
            }
        });
    }
    _getRemoteTranslationVersions() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { result: { data } } = yield this._httpClient.get(`${this._apiPrefix}/translations/versions`).toPromise();
                return data;
            }
            catch (err) {
                return null;
            }
        });
    }
    _getLocalTranslationVersions() {
        try {
            return JSON.parse(localStorage.getItem(KEYS.i18n) || '{}');
        }
        catch (error) {
            console.error(error);
            return {};
        }
    }
    _getOutDatedAppKeywords(versions, i18n) {
        const outDated = {};
        this.applicationAbbrs.forEach(abbr => {
            if (!i18n[abbr] || i18n[abbr].version < versions[abbr]) {
                outDated[abbr] = versions[abbr];
            }
        });
        return outDated;
    }
    _getTranslations(applications) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatedTranslations = {};
            yield Promise.all(Object.keys(applications).map((application) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const { result: { data } } = yield this._httpClient.post(`${this._apiPrefix}/translations`, { data: { applications: [application] } }).toPromise();
                    const keywords = this._transformTranslations(data);
                    updatedTranslations[application] = {
                        version: applications[application],
                        keywords: keywords
                    };
                }
                catch (err) {
                    console.error(err);
                }
            })));
            return updatedTranslations;
        });
    }
    _transformTranslations(translations) {
        const translationObject = {};
        translations.forEach(translation => {
            translationObject[translation.keyword] = translation.translations;
        });
        return translationObject;
    }
    _updateInStorage(newData) {
        try {
            const oldData = this._getLocalTranslationVersions();
            const toSave = Object.assign(Object.assign({}, oldData), newData);
            localStorage.setItem(KEYS.i18n, JSON.stringify(toSave));
        }
        catch (err) {
            console.log(err);
        }
    }
    get translations() {
        return this._getLocalTranslationVersions();
    }
    get versions() {
        try {
            return JSON.parse(localStorage.getItem(KEYS.appVersions) || '{}');
        }
        catch (error) {
            console.error(error);
            return {};
        }
    }
    /**
     * set config
     * @param {Config} config  set apiConfig
     */
    setConfig(config) {
        this._apiPrefix = config.apiPrefix;
    }
}
MsdaStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorage, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
MsdaStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorage });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorage, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class MsdaStorageModule {
}
MsdaStorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MsdaStorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorageModule, imports: [HttpClientModule,
        CommonModule] });
MsdaStorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorageModule, providers: [MsdaStorage], imports: [[
            HttpClientModule,
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MsdaStorageModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        HttpClientModule,
                        CommonModule
                    ],
                    exports: [],
                    providers: [MsdaStorage]
                }]
        }] });

/*
 * Public API Surface of msda-storage
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MsdaStorage, MsdaStorageModule };
//# sourceMappingURL=msda-storage.js.map
